<?xml version="1.0"?>
<launch>

<!-- the UAV specific files and the config params are loaded on system boot -->


 <!-- <include file="$(find uav_platform)/launch/uav_camera_landing.launch" /> -->

<!-- start recording this stuff -->
<node pkg="rosbag" type="rosbag" name="rosbag_record" args="record -a -x /usb_cam(.*) -O /home/jbutzke/Bag/HexaData"/>


<!-- Robot State Publisher  -->
<node pkg="robot_state_publisher" type="state_publisher" name="rob_st_pub" output="screen">
<param name="publish_frequency" value="50.0" />
</node>

<!-- Bring up the State Publisher -->
<!-- Subscribes to pan_scan, ekf_state and slam_out_pose. Publishes uav_state (Odometry msg) -->
<node pkg="uav_state_publisher" type="uav_state_publisher" name="uav_state_publisher" output="screen">
  <rosparam file="$(find uav_launch)/config/uav_state_publisher.yaml" command="load"/>
</node>

<node pkg="tf" type="static_transform_publisher" name="map2slam_map_publisher" args="0 0 0 0 0 0 map slam_map 100" />

<!--<node pkg="uav_goal_interpolate" type="uav_goal_interpolate" name="uav_goal_interpolate" output="screen" >
  <rosparam file="$(find uav_launch)/config/uav_goal_interpolate.yaml" command="load"/>
</node>-->

<!-- ....................sensor_msgs imu............................................................. -->
<!-- Bring up the hokuyos -->
<!-- Vertical hokuyo -->
<!-- if="$(arg use_tilt_laser_)"-->
<node name="panning_laser" pkg="hokuyo_node" type="hokuyo_node" >
<param name="port" value="/dev/ttyACM1" />
<param name="frame_id" value="panning_laser_frame" />
<param name="min_ang" value="-0.7" />
<param name="max_ang" value="2.35" />
<remap from="/scan" to="panning_laser" />
</node>

<!-- Horizontal hokuyo -->
<node name="fixed_laser" pkg="hokuyo_node" type="hokuyo_node">
<param name="port" value="/dev/ttyACM0" />
<param name="frame_id" value="fixed_laser_frame" />
<param name="min_ang" value="-2.356" />
<param name="max_ang" value="2.356" />
<remap from="/scan" to="fixed_laser" />
</node>

<!-- Servos -->
<!--if="$(arg use_servos_)" -->
<node name="panning_servo" pkg="uav_servo_node" type="servo_node" >
<param name="servoID" value="1" />
<param name="minAngle" value="-30" />
<param name="maxAngle" value="30" />
<param name="velocity" value="80" />
</node>

<!-- .................................................................................... -->
<!-- Hector Slam -->
<node pkg="hector_mapping" type="hector_mapping" name="hector_slam">
<rosparam file="$(find uav_launch)/config/hector_slam.yaml" command="load"/>
</node>

<!-- TODO: There is hector_geotiff node that can be brought up to save the trajectory of the UAV-->

<!-- ................................................................................ -->
<!-- Hector Localization -->
<!-- Subscribes to raw_imu, pressure_height, magnetic, fix (gps), fix_velocity (gps velocity), poseupdate     -->
<node pkg="hector_pose_estimation" type="pose_estimation" name="hector_localization">
<remap from="state" to="ekf_state"/>
<param name="with_covariances" value="false"/>
<param name="system/gyro_stddev" value="0.1" />
<param name="system/acceleration_stddev" value="1.0" />
</node>
<!--Only one param. No yaml file needed -->

<!-- ....................................................................... -->

 <!-- Bring up the behavior planner/controller -->
<!--  <node pkg="behavior_controller" type="behavior_controller" name="behavior_controller" output="screen"> -->
<!--    <rosparam file="$(find uav_launch)/config/uav_local_planner.yaml" command="load"/> -->
<!--    <remap from="goal" to="goal_pose"/> -->
<!--    <remap from="path" to="path" /> -->
   <!-- Future use -->
<!--    <remap from="twist" to="uav_state"/> -->
   <!-- TODO:  Odometry msgs are published on the uav_state_topic. Not twist !! Che/hector_localization/system/gyro_stddevck this. -->
<!--    <remap from="local_collision_map" to="local_collision_map"/> -->
   <!-- TODO: I am not sure about this. Should this be the map published by hector_slam ? -->

<!--    </node> -->

<!-- Bring up the UAV Local Planner -->
<!--<node pkg="uav_local_planner" type="uav_local_planner" name="uav_local_planner" output="screen">
<rosparam file="$(find uav_launch)/config/uav_local_planner.yaml" command="load"/>
<remap from="goal" to="goal_pose"/>
<remap from="path" to="path" />-->
<!-- Future use -->
<!--<remap from="twist" to="uav_state"/>-->
<!-- TODO:  Odometry msgs are published on the uav_state_topic. Not twist !! Che/hector_localization/system/gyro_stddevck this. -->
<!--<remap from="local_collision_map" to="local_collision_map"/>-->
<!-- TODO: I am not sure about this. Should this be the map published by hector_slam ? -->

<!--</node>-->




<!-- Bring up the dynamic reconfigure GUI for controller gains-->
<!-- <node pkg="dynamic_reconfigure" type="reconfigure_gui" name="dynamic_reconfigure_gui"/>  -->

<!-- ............................................................................. -->
<!-- Bring up RVIZ -->
<!-- <node pkg="rviz" type="rviz" name="rviz"/> -->
<!-- Bring up the interactive marker goal setting node -->
<!-- Publishes on the flight_mode and goal_pose topics -->
<node pkg="uav_set_goal" type="uav_set_goal" name="uav_set_goal" output="screen" >
  <rosparam file="$(find uav_launch)/config/uav_set_goal.yaml" command="load"/>
</node>


 <arg name="log_file_name" default="$(find move_base_3D)/maps/map1_fill" />
 <arg name="log_file_number" default="0" />
 <arg name="start_goal_name" default="$(find move_base_3D)/maps/map1_fill-pairs.csv" />
 <arg name="map_size_x" default="1600" />
 <arg name="map_size_y" default="1600" />
 <arg name="wait_after_plan" default="false" />
 <arg name="planner_type" default="sbpl_3d_static" />
 <arg name="planner_id" default="0"/>

 <!-- Global Planner Node -->
 <node pkg="move_base_3D" type="move_base_3D" name="MoveBase3D" respawn="false" output="log" clear_params="true" args=" " required="false" >

    <!--YAML FILES -->
     <rosparam file="$(find move_base_3D)/config/move_base_3D_params.yaml" command="load"/>
     <rosparam file="$(find uav_path_planner)/config/motionPlanner_params.yaml" command="load"/>

     <!--Set planner type -->
     <param name="planner_type" value="$(arg planner_type)" />

     <!--Set subset of planner type -->
     <param name="planner_id" value="$(arg planner_id)" />

     <!--Decide if it should wait between plans -->
     <param name="wait_after_plan" value="$(arg wait_after_plan)" />

     <!--sbpl_xyztheta_motion_planner params -->
     <param name="C_MP_MPRIM_FILE" value="$(find uav_path_planner)/config/quadrotor.mprim" />
     <param name="C_MP_FOOTPRINT_FILENAME" value="$(find uav_path_planner)/config/example_footprint.txt" />
     <param name="C_MP_SIZEX" value="$(arg map_size_x)" />
     <param name="C_MP_SIZEY" value="$(arg map_size_x)" />


     <!--Set this to true if you want the planner to publish at a fixed rate-->
     <param name="plan_at_fixed_rate" value="false" />

   </node>








<!-- .................................................................................... -->
</launch>

