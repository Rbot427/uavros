/* Auto-generated by genmsg_cpp for file /home/venkat/ros_workspace/uavros/uav_msgs/msg/FlightModeStatus.msg */
#ifndef UAV_MSGS_MESSAGE_FLIGHTMODESTATUS_H
#define UAV_MSGS_MESSAGE_FLIGHTMODESTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace uav_msgs
{
template <class ContainerAllocator>
struct FlightModeStatus_ {
  typedef FlightModeStatus_<ContainerAllocator> Type;

  FlightModeStatus_()
  : mode(0)
  {
  }

  FlightModeStatus_(const ContainerAllocator& _alloc)
  : mode(0)
  {
  }

  typedef int8_t _mode_type;
  int8_t mode;

  enum { LANDED = 0 };
  enum { LANDING = 1 };
  enum { TAKE_OFF = 2 };
  enum { HOVER = 3 };
  enum { FOLLOWING = 4 };

private:
  static const char* __s_getDataType_() { return "uav_msgs/FlightModeStatus"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5a8c5566e2b0a74c06a40b5b88e4ef8f"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "byte LANDED=0\n\
byte LANDING=1\n\
byte TAKE_OFF=2\n\
byte HOVER=3\n\
byte FOLLOWING=4\n\
byte mode\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, mode);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, mode);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(mode);
    return size;
  }

  typedef boost::shared_ptr< ::uav_msgs::FlightModeStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_msgs::FlightModeStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FlightModeStatus
typedef  ::uav_msgs::FlightModeStatus_<std::allocator<void> > FlightModeStatus;

typedef boost::shared_ptr< ::uav_msgs::FlightModeStatus> FlightModeStatusPtr;
typedef boost::shared_ptr< ::uav_msgs::FlightModeStatus const> FlightModeStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::uav_msgs::FlightModeStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::uav_msgs::FlightModeStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace uav_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::uav_msgs::FlightModeStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::uav_msgs::FlightModeStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::uav_msgs::FlightModeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5a8c5566e2b0a74c06a40b5b88e4ef8f";
  }

  static const char* value(const  ::uav_msgs::FlightModeStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5a8c5566e2b0a74cULL;
  static const uint64_t static_value2 = 0x06a40b5b88e4ef8fULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_msgs::FlightModeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uav_msgs/FlightModeStatus";
  }

  static const char* value(const  ::uav_msgs::FlightModeStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::uav_msgs::FlightModeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "byte LANDED=0\n\
byte LANDING=1\n\
byte TAKE_OFF=2\n\
byte HOVER=3\n\
byte FOLLOWING=4\n\
byte mode\n\
\n\
";
  }

  static const char* value(const  ::uav_msgs::FlightModeStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::uav_msgs::FlightModeStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::uav_msgs::FlightModeStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FlightModeStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_msgs::FlightModeStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::uav_msgs::FlightModeStatus_<ContainerAllocator> & v) 
  {
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UAV_MSGS_MESSAGE_FLIGHTMODESTATUS_H

